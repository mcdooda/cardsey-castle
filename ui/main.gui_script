function init(self)
	msg.post(".", "acquire_input_focus")
end

local function get_character_node(is_player, path)
	if is_player then
		return gui.get_node("healthbar-player/" .. path)
	else
		return gui.get_node("healthbar-enemy/" .. path)
	end
end

local function set_health(self, is_player, initial_value, value, max_value, animate)
	local red = get_character_node(is_player, "healthbar-red")
	local green = get_character_node(is_player, "healthbar-green")
	local text = get_character_node(is_player, "healthbar-text")
	
	local green_size = vmath.vector3(gui.get_size(red))
	green_size.x = green_size.x * (value / max_value)
	if animate then
		local animation_duration = 0.3
		gui.animate(green, "size", green_size, gui.EASING_OUTQUINT, animation_duration)
		gui.animate(red, "rotation.z", 3, gui.EASING_LINEAR, 0.04, 0, function()
			gui.animate(red, "rotation.z", -3, gui.EASING_LINEAR, 0.08, 0, function()
				gui.animate(red, "rotation.z", 0, gui.EASING_LINEAR, 0.04)
			end)
		end)
		gui.animate(green, "rotation.z", 2, gui.EASING_LINEAR, 0.04, 0, function()
			gui.animate(green, "rotation.z", -2, gui.EASING_LINEAR, 0.08, 0, function()
				gui.animate(green, "rotation.z", 0, gui.EASING_LINEAR, 0.04)
			end)
		end)
		local total_time_elapsed = 0
		timer.delay(0, true, function(self, handle, time_elapsed)
			total_time_elapsed = total_time_elapsed + time_elapsed
			if total_time_elapsed > animation_duration then
				timer.cancel(handle)
				gui.set_text(text, tostring(value) .. " / " .. tostring(max_value))
			else
				local current_value = math.floor(value + (initial_value - value) * (1 - total_time_elapsed / animation_duration))
				gui.set_text(text, tostring(current_value) .. " / " .. tostring(max_value))
			end
		end)
	else
		gui.set_text(text, tostring(value) .. " / " .. tostring(max_value))
		gui.set_size(green, green_size)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_health") then
		set_health(self, message.is_player, message.initial_value, message.value, message.max_value, message.animate)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if gui.pick_node(gui.get_node("end-turn-button"), action.x, action.y) then
			msg.post("player/character", "end_turn")
		end
	end
end
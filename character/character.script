local characters = require("character.characters")
local ai = require("character.ai")
local skills = require("skill.skills")
local cards = require("card.cards")

go.property("name", hash("Player"))
go.property("is_player", true)

-- read only properties
go.property("health_points", 1)
go.property("max_health_points", 1)
go.property("cards_count", 0)
go.property("can_draw", true)

-- cards in hand
local max_card_draw = 6
local cards_z_min = 0.5
local cards_z_max = 0.6

local function get_z(object)
	return go.get_position(object).z
end

local function set_z(object, z)
	local position = go.get_position(object)
	position.z = z
	go.set_position(position, object)
end

local function find_card_index(cards, card)
	assert(cards)
	assert(card)
	for i = 1, #cards do
		if cards[i] == card then
			return i
		end
	end
	assert(false, "could not find card " .. tostring(card))
end

local function bring_to_front(cards, card)
	local card_index = find_card_index(cards, card)
	if #cards == 1 then
		assert(cards[1] == card)
		set_z(card, cards_z_min)
	else
		table.remove(cards, card_index)
		cards[#cards + 1] = card
		local space_between_cards = (cards_z_max - cards_z_min) / (#cards - 1)
		for i = 1, #cards do
			local card_z = (i - 1) * space_between_cards + cards_z_min
			set_z(cards[i], card_z)
		end
	end
end

local function flip_random_card(cards)
	local facedown_cards = {}
	for i = 1, #cards do
		local card_url = cards[i]
		if not go.get(msg.url(nil, card_url.path, "card"), "showing_front") then
			facedown_cards[#facedown_cards + 1] = card_url
		end
	end
	if #facedown_cards > 0 then
		local random_facedown_card_index = math.random(1, #facedown_cards)
		msg.post(facedown_cards[random_facedown_card_index], "show_front")
	end
end

local function add_card(self, card_id)
	self.cards[#self.cards + 1] = card_id
	self.cards_count = self.cards_count + 1
	self.can_draw = self.cards_count < max_card_draw
	bring_to_front(self.cards, card_id)
end

local function remove_card(self, card_id)
	local card_index = find_card_index(self.cards, card_id)
	table.remove(self.cards, card_index)
	self.cards_count = self.cards_count - 1
	self.can_draw = self.cards_count < max_card_draw
end

local function get_character_url(is_player)
	if is_player then
		return msg.url("/player/character")
	else
		return msg.url("/enemy/character")
	end
end

local function get_opponent_url(self)
	return get_character_url(not self.is_player)
end

local function add_skill(self, skill_name, position)
	local properties = {
		[hash("/skill")] = {
			skill_name = skill_name,
			card_player = msg.url("."),
			opponent = get_opponent_url(self)
		}
	}
	local skill = skills[skill_name]
	local collection_factory_url = "#skill-" .. tostring(#skill.requirements) .. "-collection-factory"
	local ids = collectionfactory.create(collection_factory_url, position, nil, properties)
	local skill_url = msg.url(nil, ids[hash("/skill")], nil)
	self.skills[#self.skills + 1] = {
		ids = ids,
		skill_url = msg.url(nil, skill_url.path, "skill")
	}
	return skill_url
end

local function remove_skill(self, skill_index)
	local ids = self.skills[skill_index].ids
	go.delete(ids)
end

local function start_turn(self)
	assert(not self.is_current_turn)
	self.is_current_turn = true
	local skill_number = 1
	for i = 1, #self.character.skills do
		local skill_name = self.character.skills[i]
		local skill = assert(skills[skill_name], "Cannot find skill " .. tostring(skill_name))
		local skill_position_url
		if #skill.requirements > 1 then
			skill_position_url = "/skill-pair-position-" .. tostring(math.floor((skill_number + 1) / 2))
		else
			skill_position_url = "/skill-position-" .. tostring(skill_number)
		end
		local skill_position = go.get_position(skill_position_url)
		local x
		if self.is_player then
			x = skill_position.x + 1600
		else
			x = skill_position.x - 1600
		end
		local skill_url = add_skill(self, skill_name, skill_position)
		go.animate(skill_url, "position.x", go.PLAYBACK_ONCE_BACKWARD, x, go.EASING_INBACK, 0.8)

		if #skill.requirements > 1 then
			skill_number = skill_number + 2
		else
			skill_number = skill_number + 1
		end
	end
	local draw_amount = max_card_draw - self.cards_count
	if draw_amount < 1 then
		draw_amount = 1
	end
	
	msg.post("deck", "draw", { amount = draw_amount, show_front = true })
	
	if not self.is_player then
		timer.delay(3, false, function()
			msg.post(".", "play_ai_turn")
		end)
	end
end

local function end_turn(self)
	if not self.is_current_turn then
		return
	end
	for i = 1, #self.skills do
		local skill = self.skills[i]
		local skill_url = msg.url(nil, skill.skill_url.path, nil)
		local x
		if self.is_player then
			x = go.get_position(skill_url).x + 1600
		else
			x = go.get_position(skill_url).x - 1600
		end
		go.animate(skill_url, "position.x", go.PLAYBACK_ONCE_FORWARD, x, go.EASING_INBACK, 0.8, 0, function()
			remove_skill(self, i, false)
		end)
	end
	timer.delay(1, false, function()
		self.skills = {}
		self.is_current_turn = false
		msg.post(get_opponent_url(self), "start_turn")
	end)
end

local function set_health_points(self, health_points, animate)
	self.health_points = health_points
	msg.post("/main-gui", "set_health", { is_player = self.is_player, animate = animate, initial_value = self.health_points, value = health_points, max_value = self.max_health_points })
end

local function discard_faceup_card(self, values)
	local faceup_cards = {}
	for i = 1, #self.cards do
		local card_url = self.cards[i]
		if go.get(msg.url(nil, card_url.path, "card"), "showing_front") then
			if not values then
				faceup_cards[#faceup_cards + 1] = card_url
			else
				local found_value = false
				local card_name = go.get(msg.url(nil, card_url.path, "card"), "card_name")
				for j = 1, #values do
					local card_value = cards.get_value(card_name)
					if values[j] == cards.get_value(card_name) then
						found_value = true
						break
					end
				end
				if found_value then
					faceup_cards[#faceup_cards + 1] = card_url
				end
			end
		end
	end
	if #faceup_cards > 0 then
		local random_faceup_card_index = math.random(1, #faceup_cards)
		local card_id = faceup_cards[random_faceup_card_index]
		bring_to_front(self.cards, card_id)
		remove_card(self, card_id)
		msg.post(card_id, "dissolve")
	end
end

function init(self)
	local character = assert(characters[self.name])
	self.character = character
	
	self.name = character.name
	self.max_health_points = character.health_points
	set_health_points(self, character.health_points, false)
	
	self.is_current_turn = false
	self.skills = {}
	self.cards = {}
end

local function reload_used_skill(self, ignore_skill)
	local used_skills = {}
	for i = 1, #self.skills do
		local skill = self.skills[i].skill_url
		if skill ~= ignore_skill and go.get(skill, "used") then
			used_skills[#used_skills + 1] = skill
		end
	end
	if #used_skills > 0 then
		local random_index = math.random(1, #used_skills)
		msg.post(used_skills[random_index], "reload_skill")
	end
end

local function find_card_index(cards, card)
	assert(cards)
	assert(card)
	for i = 1, #cards do
		if cards[i] == card then
			return i
		end
	end
	assert(false, "could not find card " .. tostring(card))
end

function on_message(self, message_id, message, sender)
	-- turns
	if message_id == hash("start_turn") then
		start_turn(self)
	elseif message_id == hash("end_turn") then
		end_turn(self)
	-- ai
	elseif message_id == hash("play_ai_turn") then
		if not self.is_player then
			local best_move = ai.find_best_move(self)
			if best_move then
				if best_move == ai.draw then
					msg.post("deck", "draw", { amount = 1 })
					timer.delay(1, false, function()
						msg.post(".", "play_ai_turn")
					end)
				elseif best_move == ai.flip_random_card then
					msg.post(".", "flip_random_card")
					timer.delay(1, false, function()
						msg.post(".", "play_ai_turn")
					end)
				else
					ai.play_skill(best_move.skill_id, best_move.card_id, best_move.card_slot_index)
				end
			else
				msg.post(".", "end_turn")
			end
		end
	-- skills
	elseif message_id == hash("reload_used_skill") then
		reload_used_skill(self, message.ignore_skill_id)
	elseif message_id == hash("deal_damage") then
		local new_health_points = math.max(self.health_points - message.amount, 0)
		set_health_points(self, new_health_points, true)
	elseif message_id == hash("heal") then
		local new_health_points = math.min(self.health_points + message.amount, self.max_health_points)
		set_health_points(self, new_health_points, true)
	elseif message_id == hash("set_health_points") then
		set_health_points(self, message.health_points, true)
	elseif message_id == hash("discard_faceup_card") then
		discard_faceup_card(self, message.values)
	-- cards in hand
	elseif message_id == hash("add_card") then
		add_card(self, message.card_id)
	elseif message_id == hash("remove_card") then
		remove_card(self, message.card_id)
		go.delete(message.card_id)
	elseif message_id == hash("bring_to_front") then
		bring_to_front(self.cards, message.card_id)
	elseif message_id == hash("flip_random_card") then
		flip_random_card(self.cards)
	elseif message_id == hash("draw") then
		msg.post("deck", message_id, message)
	elseif message_id == hash("discard_stack_cards_of_suits") then
		msg.post("deck", message_id, message)
	elseif message_id == hash("discard_stack_cards_of_lesser_value") then
		msg.post("deck", message_id, message)
	elseif message_id == hash("discard_stack_cards_of_equal_value") then
		msg.post("deck", message_id, message)
	elseif message_id == hash("shuffle_into_deck") then
		msg.post("deck", message_id, message)
	end
end
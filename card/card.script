local cards = require("card.cards")
local card_animation = require("card.card_animation")

go.property("card_name", hash("red-joker"))
go.property("initial_scale", vmath.vector3())
go.property("animating", false)
go.property("showing_front", false)
go.property("character", msg.url("/player/character"))
go.property("is_in_hand", true)

function init(self)
	if self.is_in_hand then
		msg.post(self.character, "add_card", { card_id = msg.url(".") })
	end
	self.initial_scale = go.get_scale()
	self.animating = false
	self.showing_front = false
	self.overlapping_card_slots = {}
	self.card_name_string = cards.get_string(self.card_name)
end

local function dissolve(self)
	local dissolve_duration = 1
	go.animate("#sprite", "dissolve_progression.x", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, dissolve_duration, 0, function()
		go.delete()
	end)
	
	local random_position_deviation = 30
	local position = go.get_position() + vmath.vector3(math.random() * random_position_deviation * 2 - random_position_deviation, math.random() * random_position_deviation * 2 - random_position_deviation, 0)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_INSINE, dissolve_duration)

	local random_deviation = 20
	local euler_z = math.random() * random_deviation * 2 - random_deviation
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, euler_z, go.EASING_INSINE, dissolve_duration)
end

local function find_index_for_card_slot(skills, skill_id, card_slot_index)
	for i = 1, #skills do
		if skills[i].skill_id == skill_id and skills[i].card_slot_index == card_slot_index then
			return i
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("click") then
		if not self.showing_front then
			msg.post(".", "show_front")
		end
	elseif message_id == hash("entered_skill_card_slot") then
		if find_index_for_card_slot(self.overlapping_card_slots, message.skill_id, message.card_slot_index) then
			assert(false)
		end
		self.overlapping_card_slots[#self.overlapping_card_slots + 1] = {
			skill_id = message.skill_id,
			card_slot_index = message.card_slot_index
		}
	elseif message_id == hash("left_skill_card_slot") then
		local index = assert(find_index_for_card_slot(self.overlapping_card_slots, message.skill_id, message.card_slot_index), "Cannot find skill " .. tostring(message.skill_id) .. " ; card slot index " .. tostring(message.card_slot_index))
		table.remove(self.overlapping_card_slots, index)
	elseif message_id == hash("drag") then
		msg.post("#cards-collision", "disable")
	elseif message_id == hash("drop") then
		if #self.overlapping_card_slots == 1 then
			local card_slot = self.overlapping_card_slots[1]
			local skill_id = card_slot.skill_id
			local card_slot_index = card_slot.card_slot_index
			msg.post(card_slot.skill_id, "drop_card_on_slot", { card_id = msg.url("."), card_slot_index = card_slot_index })
		elseif #self.overlapping_card_slots > 1 then
			msg.post(".", "drop") -- try again
		else
			msg.post("#cards-collision", "enable")
		end
	elseif message_id == hash("dissolve") then
		dissolve(self)
	end
	
	if self.animating then
		return
	end
	if message_id == hash("show_front") then
		card_animation.show_front(".")
	end
end

function on_input(self, action_id, action)
	if not action_id then
		self.pressed = false
		-- todo drag
	elseif action_id == hash("touch") and action.pressed then
		self.pressed = true
	elseif action_id == hash("touch") and action.released then
		if self.pressed then
			msg.post(".", "show_front")
		end
	end
end

local card_animation = require("card.card_animation")

go.property("skill_name", hash("test_skill_1"))
go.property("card_player", msg.url())
go.property("opponent", msg.url())
go.property("used", false)

local skills = require("skill.skills")

function init(self)
	self.skill = assert(skills[self.skill_name], "cannot find skill " .. tostring(self.skill_name))
	--label.set_text("#name-label", self.skill.name .. " (" .. msg.url(".").path .. ")")
	label.set_text("#name-label", self.skill.name)
	for i = 1, #self.skill.requirements do
		label.set_text("#requirements-label-" .. tostring(i), self.skill.requirements[i])
	end

	self.card_id_per_slot = {}
	
	label.set_text("#description-label", self.skill.description)
	self.initial_y = go.get_position().y

	msg.post("skill-background", "set_color", { color = self.skill.color })
	go.set_parent("skill-background", msg.url("."), true)

	local name_background_color = vmath.vector4(self.skill.color)
	name_background_color.x = math.max(name_background_color.x - 0.1, 0)
	name_background_color.y = math.max(name_background_color.y - 0.1, 0)
	name_background_color.z = math.max(name_background_color.z - 0.1, 0)
	msg.post("skill-name-background", "set_color", { color = name_background_color })
	go.set_parent("skill-name-background", msg.url("."), true)
	
	go.set_parent("skill-outline", msg.url("."), true)
	msg.post("skill-outline", "disable")
end

local function can_play_card(self, card, card_slot_index)
	local card_script_url = msg.url(nil, card, "card")
	local card_name
	local showing_front = go.get(card_script_url, "showing_front")
	if showing_front then
		card_name = go.get(card_script_url, "card_name")
	end
	return self.skill:can_play_card(card_name, card_slot_index)
end

local function get_cards_data(self)
	local cards_data = {}
	for i = 1, #self.card_id_per_slot do
		local card_id = self.card_id_per_slot[i]
		local card_script_url = msg.url(nil, card_id.path, "card")
		local card_name = go.get(card_script_url, "card_name")
		local showing_front = go.get(card_script_url, "showing_front")
		cards_data[#cards_data + 1] = {
			id = card_id,
			name = card_name,
			showing_front = showing_front
		}
	end
	return cards_data
end

local function prepare_skill(self, decision)
	local cards_data = get_cards_data(self)
	return self.skill:prepare(cards_data, self.card_player, self.opponent, msg.url("#"), decision)
end

local function execute_skill(self, decision)
	local cards_data = get_cards_data(self)
	self.skill:execute(cards_data, self.card_player, self.opponent, msg.url("#"), decision)
end

local function shake(self)
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 3, go.EASING_LINEAR, 0.04, 0, function()
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, -3, go.EASING_LINEAR, 0.08, 0, function()
			go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.04)
		end)
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		local card = message.other_id
		if go.get(msg.url(nil, card, "card"), "character") == self.card_player then
			local card_slot_collision_group_to_index = {
				[hash("skill-slot-1")] = 1,
				[hash("skill-slot-2")] = 2,
				[hash("skill-slot-3")] = 3,
			}
			local card_slot_index = assert(card_slot_collision_group_to_index[message.own_group], "No card slot for collision group " .. tostring(message.own_group))
			if message.enter then
				if can_play_card(self, card, card_slot_index) then
					msg.post(card, "entered_skill_card_slot", { skill_id = msg.url("."), card_slot_index = card_slot_index })
					msg.post("skill-outline", "set_color", { color = vmath.vector4(1, 1, 1, 0) })
				else
					if go.get(msg.url(nil, self.card_player.path, "character"), "is_player") then
						shake(self)
					end
				end
			elseif not self.used then
				if can_play_card(self, card, card_slot_index) then
					msg.post(message.other_id, "left_skill_card_slot", { skill_id = msg.url("."), card_slot_index = card_slot_index })
					msg.post("skill-outline", "clear")
					self.card_id_per_slot[card_slot_index] = nil
				end
			end
		end
	elseif message_id == hash("drop_card_on_slot") then
		local card_id = message.card_id
		local card_slot_index = message.card_slot_index

		-- disable card collisions
		msg.post(msg.url(nil, card_id.path, "collisionobject"), "disable")
		msg.post(msg.url(nil, card_id.path, "cards-collision"), "disable")

		-- disable card slot collisions
		msg.post("#collisionobject-" .. tostring(card_slot_index), "disable")

		local skill_position = go.get_position()
		local card_position = go.get_position(card_id)
		local position = vmath.vector3()
		position.x = skill_position.x + ((card_slot_index - 1) - (#self.skill.requirements - 1) * 0.5) * 160 * 0.9
		position.y = skill_position.y
		position.z = skill_position.z + 0.02
		go.animate(card_id, "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_OUTQUINT, 0.3)
		go.animate(card_id, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_OUTQUINT, 0.3, 0, function()
			local function set_parent_drop()
				go.set_parent(card_id, ".", true)
				msg.post(".", "card_dropped_on_slot", message)
			end
			if go.get(msg.url(nil, card_id.path, "card"), "showing_front") then
				set_parent_drop()
			else
				card_animation.show_front(card_id, function()
					timer.delay(0.5, false, set_parent_drop)
				end)
			end
		end)
	elseif message_id == hash("card_dropped_on_slot") then
		local card_id = message.card_id
		local card_slot_index = message.card_slot_index
		
		if not self.card_id_per_slot[card_slot_index] then
			self.card_id_per_slot[card_slot_index] = card_id
			local num_played_slots = 0
			for i = 1, #self.skill.requirements do
				if self.card_id_per_slot[i] then
					num_played_slots = num_played_slots + 1
				end
			end
			assert(num_played_slots <= #self.skill.requirements)
			if num_played_slots == #self.skill.requirements then
				msg.post(".", "execute_skill")
			end
		end
	elseif message_id == hash("execute_skill") then
		if self.used then
			return
		end
		assert(#self.skill.requirements == #self.card_id_per_slot)
		self.used = true
		
		local decision = {}
		local target_character, discard_used_cards = prepare_skill(self, decision)

		if not discard_used_cards then
			for i = 1, #self.card_id_per_slot do
				go.set_parent(self.card_id_per_slot[i], nil, true)
			end
		end
		
		local y
		if go.get(msg.url(nil, target_character.path, "character"), "is_player") then
			y = self.initial_y - 1600
		else
			y = self.initial_y + 1600
		end
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, y, go.EASING_INBACK, 0.4, 0, function()
			execute_skill(self, decision)
			if discard_used_cards then
				for i = 1, #self.card_id_per_slot do
					msg.post(self.card_player, "remove_card", { card_id = self.card_id_per_slot[i] })
				end
			end

			if not go.get(msg.url(nil, self.card_player.path, "character"), "is_player") then
				timer.delay(1, false, function()
					msg.post(self.card_player, "play_ai_turn")
				end)
			end
		end)
	elseif message_id == hash("reload_skill") then
		if not self.used then
			return
		end
		self.used = false
		self.card_id_per_slot = {}
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.initial_y, go.EASING_INBACK, 0.4, 0, function()
			-- enable slot collisions
			for i = 1, #self.skill.requirements do
				msg.post("#collisionobject-" .. tostring(i), "enable")
			end
		end)
	end
end
